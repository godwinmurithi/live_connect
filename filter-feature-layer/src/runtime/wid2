import { AllWidgetProps, jsx, FeatureLayerDataSource, SqlQueryParams, DataSourceManager } from "jimu-core";
import { IMConfig } from "../config";
import { WidgetPlaceholder } from 'jimu-ui';
import { useState, useEffect } from 'react';

import defaultMessages from "./translations/default";
import React from "react";

export default function (props: AllWidgetProps<IMConfig>) {
  const [query, setQuery] = useState('');
  const [selectedFeatures, setSelectedFeatures] = useState([]);
  const [dataSource, setDataSource] = useState<FeatureLayerDataSource | null>(null);

  const onSelectionChange = (selection: any[]) => {
    setSelectedFeatures(selection);
  }

  useEffect(() => {
    // Listen for selection changes in the connected widget
    props.widgetRuntimeStateProps?.useSelection?.useSelections?.([props.config.useSelectionId], onSelectionChange);
  }, []);

  useEffect(() => {
    if (props.useDataSources.length > 0) {
      // Get the data source using useDataSource.dataSourceId
      const useDataSource = props.useDataSources[0];
      const dsManager = DataSourceManager.getInstance();
      const ds = dsManager.getDataSource(useDataSource.dataSourceId) as FeatureLayerDataSource;
      setDataSource(ds);
    }
  }, [props.useDataSources]);

  const removeFilters = () => {
    setQuery('');
    setSelectedFeatures([]);
  }

  const buttonStyle = {
    backgroundColor: '#0074d9',
    color: '#fff',
    padding: '8px 16px',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer',
    transition: 'background-color 0.3s ease-out',
  };

  const buttonHoverStyle = {
    backgroundColor: '#fff',
    color: '#0074d9',
  };

  return (
    <div className="widget-get-map-coordinates jimu-widget p-2">
      <div>
        <button
          style={buttonStyle}
          onClick={removeFilters}
          onMouseEnter={(e) => { e.target.style.backgroundColor = buttonHoverStyle.backgroundColor; e.target.style.color = buttonHoverStyle.color; }}
          onMouseLeave={(e) => { e.target.style.backgroundColor = buttonStyle.backgroundColor; e.target.style.color = buttonStyle.color; }}
          onMouseDown={(e) => { e.target.style.backgroundColor = buttonHoverStyle.backgroundColor; e.target.style.color = buttonHoverStyle.color; }}
          onMouseUp={(e) => { e.target.style.backgroundColor = buttonStyle.backgroundColor; e.target.style.color = buttonStyle.color; }}
        >
          Reset Filters
        </button>
      </div>
    </div>
  );
}
